name: Build and Release Resources

on:
  push:
    tags:
      - 'v*'      # Any tag starting with v
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags and commits

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Extract tag and version info
        id: extract_info
        run: |
          # Get the tag name (e.g., v0.0.1)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Strip 'v' prefix if present for version (e.g., 0.0.1)
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Get the branch that this tag was created on
          BRANCH_NAME=$(git branch -r --contains $TAG_NAME | grep -v HEAD | sed 's/.*origin\///' | head -n 1)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Set release type based on branch
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Release $TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=[$BRANCH_NAME] Release $TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Build Frontend
        run: |
          cd webui/frontend
          npm ci
          npm run build
          # The build script already creates dist/frontend, but we'll verify
          ls -la dist/
          cd ../..

      - name: Build Backend
        run: |
          cd webui/backend
          npm ci
          npm run build
          # The build script already creates dist/backend, but we'll verify
          ls -la dist/
          cd ../..

      - name: Create webui.zip
        run: |
          # Create a temporary directory for webui contents
          mkdir -p webui_temp/frontend
          mkdir -p webui_temp/backend
          
          # Copy frontend dist contents (everything inside dist/)
          if [ -d "./webui/frontend/dist" ]; then
            cp -r ./webui/frontend/dist/* ./webui_temp/frontend/
          else
            echo "Frontend dist directory not found"
            exit 1
          fi
          
          # Copy backend dist contents (everything inside dist/)
          if [ -d "./webui/backend/dist" ]; then
            cp -r ./webui/backend/dist/* ./webui_temp/backend/
          else
            echo "Backend dist directory not found"
            exit 1
          fi
          
          # Create the webui.zip
          cd webui_temp
          zip -r ../webui.zip .
          cd ..
          
          # Clean up
          rm -rf webui_temp
          
          # Verify the ZIP was created
          ls -la webui.zip

      - name: Prepare setup files
        run: |
          # Create version.txt file
          echo "${{ steps.extract_info.outputs.VERSION }}" > setup/version.txt
          
          # Replace placeholders in all script files in the setup directory
          find setup \( -name "*.sh" -o -name "hv" \) -type f -exec sed -i "s/{{GH_RELEASE_TAG}}/${{ steps.extract_info.outputs.TAG_NAME }}/g" {} \;

      - name: Generate ZIP files
        run: |
          # Create output directories
          mkdir -p output_zips/appdata
          
          # Move webui.zip to output directory
          mv webui.zip output_zips/
          
          # Create appdata ZIP files
          if [ -d "./appdata" ]; then
            find ./appdata -mindepth 1 -maxdepth 1 -type d | while read dir; do
              folder_name=$(basename "$dir")
              zip_name="${folder_name}.zip"
              echo "Creating ZIP: $zip_name for content in $dir"
              (cd "$dir" && zip -r "../../output_zips/appdata/$zip_name" .)
            done
          else
            echo "Root appdata directory not found"
          fi
          
          # Create setup.zip from the /setup folder at the root
          if [ -d "./setup" ]; then
            echo "Creating setup.zip from /setup folder"
            (cd "./setup" && zip -r "../output_zips/setup.zip" .)
          else
            echo "Setup directory not found"
          fi

      - name: Upload ZIP files
        uses: actions/upload-artifact@v4
        with:
          name: output_zips
          path: output_zips

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Download ZIP files
        uses: actions/download-artifact@v4
        with:
          name: output_zips
          path: release_files

      - name: Extract tag and branch info
        id: extract_info
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Get the branch that this tag was created on
          BRANCH_NAME=$(git branch -r --contains $TAG_NAME | grep -v HEAD | sed 's/.*origin\///' | head -n 1)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Set release type based on branch
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Release $TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=[$BRANCH_NAME] Release $TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        id: release_notes
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          BRANCH_NAME=${{ steps.extract_info.outputs.BRANCH_NAME }}
          
          echo "Current tag: $CURRENT_TAG"
          echo "Current branch: $BRANCH_NAME"
          
          # Get all tags that are reachable from the current branch's history
          # This filters out tags that exist only on other branches
          BRANCH_TAGS=$(git tag --merged origin/$BRANCH_NAME | grep "^v" | sort -V)
          
          # On main, only consider tags without branch suffixes (e.g., v0.1.4, not v0.1.4-feature)
          if [ "$BRANCH_NAME" = "main" ]; then
            BRANCH_TAGS=$(echo "$BRANCH_TAGS" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$")
          fi
          
          # Find the previous tag on the same branch
          PREVIOUS_TAG=""
          for tag in $BRANCH_TAGS; do
            if [ "$tag" = "$CURRENT_TAG" ]; then
              break
            fi
            PREVIOUS_TAG=$tag
          done
          
          echo "Previous tag on branch: $PREVIOUS_TAG"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag on this branch, use all commits on this branch
            echo "PREVIOUS_TAG=initial" >> $GITHUB_OUTPUT
            echo "## ðŸš€ Changes in this release" > release_notes.md
            echo "" >> release_notes.md
            echo "### First release on branch: $BRANCH_NAME" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get the merge base with main (if not on main) to limit the commit range
            if [ "$BRANCH_NAME" != "main" ]; then
              MERGE_BASE=$(git merge-base origin/main origin/$BRANCH_NAME)
              git log --pretty=format:"* %s (%h)" $MERGE_BASE..HEAD >> release_notes.md
            else
              git log --pretty=format:"* %s (%h)" >> release_notes.md
            fi
          else
            echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "## ðŸš€ Changes since $PREVIOUS_TAG" > release_notes.md
            echo "" >> release_notes.md
            echo "### Commits" >> release_notes.md
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> release_notes.md
            
            # Add affected directories section
            echo "" >> release_notes.md
            echo "### Changed Directories" >> release_notes.md
            git diff --name-only $PREVIOUS_TAG..$CURRENT_TAG | grep -v "^\.github/" | awk -F/ '{print $1}' | sort | uniq | sed 's/^/* /' >> release_notes.md
          fi
          
          # Append release date
          echo "" >> release_notes.md
          echo "### Release Info" >> release_notes.md
          echo "* Released on: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "* Branch: $BRANCH_NAME" >> release_notes.md
          
          cat release_notes.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_info.outputs.TAG_NAME }}
          name: ${{ steps.extract_info.outputs.RELEASE_NAME }}
          draft: false
          prerelease: ${{ steps.extract_info.outputs.IS_PRERELEASE }}
          body_path: release_notes.md
          files: |
            release_files/appdata/*.zip
            release_files/setup.zip
            release_files/webui.zip