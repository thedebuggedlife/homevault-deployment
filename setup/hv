#!/bin/bash

set -o pipefail

PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="${PROJECT_ROOT%/}"
PROJECT_VERSION="{{GH_RELEASE_TAG}}"

source "$PROJECT_ROOT/lib/logging.sh"
source "$PROJECT_ROOT/lib/config.sh"
source "$PROJECT_ROOT/lib/cmdline.sh"
source "$PROJECT_ROOT/lib/smtp2go.sh"
source "$PROJECT_ROOT/lib/docker.sh"
source "$PROJECT_ROOT/lib/backup.sh"
source "$PROJECT_ROOT/lib/webui.sh"

declare -g SELECTED_ACTION=
declare -g SHOW_ALL=false
declare -g COMPOSE_PATH=
declare -g PROJECT_PATH=
declare -g SECRETS_PATH=
declare -g OVERRIDE_COMPOSE=true
declare -g OVERRIDE_VERSIONS=false
declare -g UNATTENDED=
declare -g FORCE=
declare -g NO_DOWNLOAD=
declare -g USE_SMTP2GO
declare -g USE_DEFAULTS=true
declare -g ENV_FILE=.env
declare -g AS_USER="$USER"
declare -g COMPOSE_PROJECT_NAME=homevault
declare -g COMPOSE_OPTIONS=
declare -g COMPOSE_UP_OPTIONS=
declare -g JSON_OUTPUT={}

# WebUI configuration
declare -g WEBUI_ACTION=
declare -g WEBUI_CONFIG=false

# Defaults to false, if set to true, docker and restic operations will be passed the --dry-run parameter
# Can be set with the --dry-run command line option
declare -g DRY_RUN=false

# Defaults to false, if set to true, a restart will be requested at the end of the deployment
declare -g REQUIRES_RESTART=false

# Defaults to empty, use it to override which services to pass to docker-compose
declare -g DEPLOY_SERVICES=

# Defaults to empty, the values in the map override the default values for prompts
# Can be set the -o|--override on command line option
declare -gA ENV_OVERRIDES

# Administrator account
declare -g ADMIN_USERNAME=
declare -g ADMIN_PASSWORD=
declare -g ADMIN_EMAIL=
declare -g ADMIN_DISPLAY_NAME=

# Global ENV variables
declare -g APPDATA_LOCATION=
# shellcheck disable=SC2034
declare -g TAILSCALE_IP=
declare -g CF_DOMAIN_NAME=

# Base module should always be first in the list
declare -ga ENABLED_MODULES=("base")
declare -ga INSTALLED_MODULES=()
declare -ga REMOVE_MODULES=()

################################################################################
#                           SETUP MODULES

declare -ga CONFIG_WEBUI_HOOKS=()
declare -ga CONFIG_ENV_HOOKS=()
declare -ga CONFIG_SECRETS_HOOKS=()
declare -ga COMPOSE_EXTRA_HOOKS=()
declare -ga PRE_INSTALL_HOOKS=()
declare -ga POST_INSTALL_HOOKS=()
declare -ga BOOTSTRAP_HOOKS=()
declare -ga POST_RESTORE_HOOKS=()
declare -ga BACKUP_CONFIG_HOOKS=()
declare -ga BACKUP_SERVICES=()
declare -ga BACKUP_FILTER_INCLUDE=()
declare -ga BACKUP_FILTER_EXCLUDE=()
declare -gA MODULE_OPTIONS

dedup_modules() {
    local -A seen_modules
    local unique_modules=()

    # First, ensure "base" is always present and in first position
    unique_modules+=("base")
    seen_modules["base"]=1

    for module in "${ENABLED_MODULES[@]}"; do
        if [[ -z "${seen_modules[$module]}" ]]; then
            unique_modules+=("$module")
            seen_modules[$module]=1
        fi
    done

    ENABLED_MODULES=("${unique_modules[@]}")
}

load_modules() {
    log_header "Loading enabled modules"
    dedup_modules
    for module in "${ENABLED_MODULES[@]}"; do
        log "Loading module ${Purple}$module${COff}"
        local module_setup="$PROJECT_ROOT/modules/$module/setup.sh"
        if [ -f "$module_setup" ]; then
            # shellcheck source=/dev/null
            source "$module_setup"
        else
            log_error "Module '$module' is invalid. Use --help flag to see a list of supported modules"
            exit 1
        fi
    done
}

###
# Function to execute all hooks in a given array
#
# Example: 
#   execute_hooks POST_INSTALL_HOOKS[@] "post-install"
#
# @param $hook_array    The hooks to execute
# @param $hook_name     The name of the hook (for logging)
# @return void
###
execute_hooks() {
    local hook_name="${!#}"  # Get the last argument (hook name)
    local -a hooks=("${@:1:$#-1}")  # Get all arguments except the last one
    
    log "\nExecuting ${Purple}$hook_name${COff} hooks...\n"
    for hook in "${hooks[@]}"; do
        if ! $hook; then
            log_error "Hook '$hook' failed"
            return 1
        fi
    done
}

implicit_env_vars() {
    SECRETS_PATH="${APPDATA_LOCATION%/}/secrets/"
    PROJECT_PATH="${APPDATA_LOCATION%/}/project/$COMPOSE_PROJECT_NAME"
    COMPOSE_PATH="${APPDATA_LOCATION%/}/project/$COMPOSE_PROJECT_NAME/compose"
}

###
# Combine environment files from enabled modules
#
# @return void
###
prepare_env_file() {
    log_header "Preparing environment files"

    if [ ! -f "$ENV_FILE" ]; then
        log "Creating environment file ${Cyan}$ENV_FILE${COff}"
        touch "$ENV_FILE" && chmod 600 "$ENV_FILE" || {
            log_error "Failed to create environment file: '$ENV_FILE'"
            exit 1
        }
    fi
    for module in "${ENABLED_MODULES[@]}"; do
        local module_env="$PROJECT_ROOT/modules/$module/.env"
        copy_env_values "$module_env" "$ENV_FILE" || exit 1
    done
    save_env PROJECT_VERSION "$PROJECT_VERSION"
    # shellcheck source=/dev/null
    source "$ENV_FILE"
    implicit_env_vars
}

###
# Download application data for all enabled modules
#
# @return void
###
download_appdata() {
    if [[ "$NO_DOWNLOAD" = true || "$PROJECT_VERSION" = "test" ]]; then return 0; fi
    log_header "Downloading application data for modules"
    for module in "${ENABLED_MODULES[@]}"; do
        download_module_appdata "$module"
    done
}

load_module_help() {
    local module_file module_name module_help
    for module_file in "$PROJECT_ROOT"/modules/*/help.txt; do
        module_name=$(basename "$(dirname "$module_file")")
        module_help=$(cat "$module_file")
        #shellcheck disable=SC2034
        MODULE_OPTIONS["$module_name"]="$module_help"
        JSON_OUTPUT=$(echo "${JSON_OUTPUT}" | jq --arg name "$module_name" --arg help "$module_help" '
            .modules.available[$name] = $help
        ')
    done
}

find_all_modules() {
    for module_file in "$PROJECT_ROOT"/modules/*/setup.sh; do
        module_name=$(basename "$(dirname "$module_file")")
        if [ "$module_name" != "base" ]; then
            ENABLED_MODULES+=("$module_name")
        fi
    done
}

find_installed_modules() {
    # Do not run twice, if install modules have already been detected
    if [[ ${#INSTALLED_MODULES[@]} -gt 0 ]]; then return 0; fi

    log_header "Looking for installed modules"

    if [ "$_DOCKER_INSTALLED" != "true" ]; then return 0; fi

    local container_ids container_id container_labels module_name
    container_ids=$(docker ps -aq --filter "label=com.docker.compose.project=$COMPOSE_PROJECT_NAME")

    for container_id in $container_ids; do
        container_labels=$(docker inspect --format '{{range $k,$v := .Config.Labels}}{{$k}}={{$v}}{{printf "\n"}}{{end}}' "$container_id")
        
        # Find labels matching the pattern selfhost.module.XX=1
        while IFS= read -r label; do
            if [[ "$label" =~ ^selfhost\.module\.(.+)=1$ ]]; then
                module_name="${BASH_REMATCH[1]}"
                INSTALLED_MODULES+=("$module_name")
            fi
        done <<< "$container_labels"
    done

    if [[ ${#INSTALLED_MODULES[@]} -eq 0 ]]; then
        log "There are no modules installed."
        JSON_OUTPUT=$(echo "${JSON_OUTPUT}" | jq '. + {
            modules: {
                installed: []
            }
        }')
        return 0
    fi

    # Remove duplicates from the array
    mapfile -t INSTALLED_MODULES < <(printf "%s\n" "${INSTALLED_MODULES[@]}" | sort -u)

    JSON_OUTPUT=$(echo "${JSON_OUTPUT}" | jq --args '.modules.installed=$ARGS.positional' "${INSTALLED_MODULES[@]}")

    local module
    for module in "${INSTALLED_MODULES[@]}"; do
        log "Found installed module: ${Purple}$module${COff}"
        # Enable all installed modules except those marked for removal
        array_contains "$module" "${REMOVE_MODULES[@]}" || ENABLED_MODULES+=("$module")
    done

    dedup_modules
}

find_missing_modules() {
    # Find modules that are installed but not enabled
    local -a missing_modules=()
    local module
    for module in "${INSTALLED_MODULES[@]}"; do
        # shellcheck disable=SC2076
        if [[ ! " ${ENABLED_MODULES[*]} " =~ " ${module} " ]]; then
            missing_modules+=("$module")
        fi
    done

    if [ ${#missing_modules[@]} -gt 0 ]; then
        log_warn "Some modules will be removed by this operation. Please read the following carefully."
        log "The following modules are installed but were not included in this run:"
        printf "  - %s\n" "${missing_modules[@]}"
        log "\nIf this was unintentional, exit and re-run the script, including them with the -m option."
        log
        if ! ask_confirmation; then
            abort_install
        fi
    fi
}

################################################################################
#                            CONFIGURATION STEPS

###
# Create the application data folder (which is mounted into Docker)
#
# @return void
###
create_data_locations() {
    log_header "Preparing application data folder"

    ensure_path_exists "$APPDATA_LOCATION"
    ensure_path_exists "$SECRETS_PATH"
    ensure_path_exists "$PROJECT_PATH"
    ensure_path_exists "$COMPOSE_PATH"
}

###
# Ask for any variables that aren't yet defined in the .env file
#
# @return void
###
ask_for_variables() {
    if [ "$WEBUI_CONFIG" = true ]; then
        execute_hooks "${CONFIG_WEBUI_HOOKS[@]}" "config-webui" || exit 1
    else
        execute_hooks "${CONFIG_ENV_HOOKS[@]}" "config-env" || exit 1
    fi
    implicit_env_vars
}

###
# Create any missing secret files
#
# @return void
###
save_secrets() {
    log_header "Preparing secret files"
    execute_hooks "${CONFIG_SECRETS_HOOKS[@]}" "config-secrets" || exit 1
    if ! chmod 644 "${SECRETS_PATH}"*; then
        exit 1
    fi
}

DEPLOY_BACKUP_STOPPED=false

deploy_stop_backup() {
    compose_service_exists "backup" --status running && {
        log "Stopping service ${Purple}backup${COff} during deployment"
        docker compose -p "$COMPOSE_PROJECT_NAME" stop backup || {
            log_error "Failed to stop backup service"
            exit 1
        }
        DEPLOY_BACKUP_STOPPED=true
    }
}

deploy_restart_backup() {
    if [ "$DEPLOY_BACKUP_STOPPED" = true ]; then
        log "Restarting ${Purple}backup${COff} service"
        docker compose -p "$COMPOSE_PROJECT_NAME" start backup || {
            log_warn "Failed to restart backup service"
        }
    fi
}

###
# Deploy services via docker compose
#
# @return void
###
deploy_project() {
    COMPOSE_OPTIONS="-p '$COMPOSE_PROJECT_NAME' --env-file '$ENV_FILE' $COMPOSE_OPTIONS"
    COMPOSE_UP_OPTIONS="-d -y --remove-orphans --quiet-pull --wait $COMPOSE_UP_OPTIONS"
    if [ "$DRY_RUN" = true ]; then COMPOSE_UP_OPTIONS+=" --dry-run"; fi


    ensure_path_exists "${COMPOSE_PATH%/}/" || return 1
    if [ "$OVERRIDE_COMPOSE" = true ]; then
        rm -rf "${COMPOSE_PATH:?}/"* || {
            log_error "Failed to delete previous compose files"
            return 1
        }
    fi

    # Grab the default "docker-compose.yml" file for each module
    local -a original_files=()
    local -a project_files=()
    for module in "${ENABLED_MODULES[@]}"; do
        local default_file="${PROJECT_ROOT%/}/modules/$module/docker-compose.yml"
        if [ -f "$default_file" ]; then
            original_files+=("$module:$default_file")
        fi
    done

    # Collect any additional files provided by the enabled modules
    local hooks_output extra_files
    hooks_output=$(execute_hooks  "${COMPOSE_EXTRA_HOOKS[@]}" "compose-extra") || return 1
    readarray -t extra_files <<< "$hooks_output"
    original_files+=("${extra_files[@]}")

    # Copy the files to match the following file layout: 
    # "{APPDATA_LOCATION}/project/{PROJECT}/compose/{module}/docker-compose[.{extra}].yml"
    for original_file in "${original_files[@]}"; do
        local project_file target_project inner
        # Original file format "<source_module>:<full_path>[:<target_module>]"
        IFS=':' read -r module original_file inner <<< "$original_file"
        if [ -z "$inner" ]; then
            target_project="$module"
            project_file="${COMPOSE_PATH%/}/$module/$(basename "$original_file")"
        else
            printf '%s\n' "${ENABLED_MODULES[@]}" | grep -q "^$inner$" || continue
            target_project="$inner ($module)"
            project_file="${COMPOSE_PATH%/}/$inner/docker-compose.$module.yml"
        fi
        if [ -f "$original_file" ]; then
            # Copy docker-compose files only if they do not currently exist under appdata (unless overridden)
            # This is important because, the files in appdata may be modified during container-update operations
            if [[ -f "$project_file" ]]; then
                log "Using existing compose file: ${Cyan}$project_file${COff}"
            else
                log "Copying docker compose file for ${Purple}$target_project${COff} to ${Cyan}$project_file${COff}"
                ensure_path_exists "$( dirname "$project_file" )" || return 1
                (cp -f "$original_file" "$project_file") || {
                    log_error "Failed to copy docker compose file for '$target_project'"
                    return 1
                }
            fi
        fi
        if [ -f "$project_file" ]; then
            project_files+=("$project_file")
            COMPOSE_OPTIONS="$COMPOSE_OPTIONS -f '$project_file'"
        fi
    done

    log

    if [ "$OVERRIDE_VERSIONS" != true ]; then
        if ! compose_match_container_versions "$COMPOSE_PROJECT_NAME" "${project_files[@]}"; then
            log_error "Failed to match existing container versions in compose project files"
            return 1
        fi
    fi

    local user_input=Y
    if [ "$FORCE" != true ]; then
        if [ "$UNATTENDED" != true ]; then
            log "\n\nProject ${Purple}$COMPOSE_PROJECT_NAME${COff} is ready for docker deployment. "
            read -p "Do you want to proceed? [Y/n] " user_input </dev/tty
            user_input=${user_input:-Y}
        fi
        if [[ ! "$user_input" =~ ^[Yy]$ ]]; then
            abort_install
        fi
    fi

    deploy_stop_backup

    execute_hooks "${PRE_INSTALL_HOOKS[@]}" "pre-install" || return 1

    log_header "Deploying services"

    log "Deploying project ${Purple}$COMPOSE_PROJECT_NAME${COff}..."
    if ! sg docker -c "docker compose $COMPOSE_OPTIONS up $COMPOSE_UP_OPTIONS $DEPLOY_SERVICES"; then
        log_error "Docker Compose deployment failed"
        return 1
    fi

    log_header "Finalizing deployment"

    execute_hooks "${POST_INSTALL_HOOKS[@]}" "post-install" || return 1

    execute_hooks "${BOOTSTRAP_HOOKS[@]}" "bootstrap" || return 1

    save_deployment_file || return 1
}

###
# Create the variables with values for server administrator account and save
# them to the file used for LLDAP bootstrap
#
# Options:
#   -l      Load only, do not save to file (for post-install steps only)
#
# @return void
###
configure_admin_account() {
    log_header "Configuring administrator account"

    local config_file="${APPDATA_LOCATION%/}/lldap/bootstrap/user-configs/admin.json"
    local load_only=false
    OPTIND=1
    while getopts ":l" opt; do
        case $opt in
            l) load_only=true ;;
            \?) log_warn "Invalid option: -$OPTARG" ;;
        esac
    done

    # Apply any overrides passed via -o flag
    ADMIN_USERNAME="${ENV_OVERRIDES[ADMIN_USERNAME]}"
    ADMIN_EMAIL="${ENV_OVERRIDES[ADMIN_EMAIL]}"
    ADMIN_PASSWORD="${ENV_OVERRIDES[ADMIN_PASSWORD]}"
    ADMIN_DISPLAY_NAME="${ENV_OVERRIDES[ADMIN_DISPLAY_NAME]}"

    local save_file=false
    if [[ -n "$ADMIN_USERNAME" || -n "$ADMIN_EMAIL" || -n "$ADMIN_PASSWORD" || -n "$ADMIN_DISPLAY_NAME" ]]; then
        save_file=true
    fi

    # Read missing values from file (if it exists)
    if [[ -f "$config_file" ]]; then
        ADMIN_USERNAME=${ADMIN_USERNAME:-"$(jq -r '.id' "$config_file")"}
        ADMIN_EMAIL=${ADMIN_EMAIL:-"$(jq -r '.email' "$config_file")"}
        ADMIN_PASSWORD=${ADMIN_PASSWORD:-"$(jq -r '.password' "$config_file")"}
        ADMIN_DISPLAY_NAME=${ADMIN_DISPLAY_NAME:-"$(jq -r '.displayName' "$config_file")"}
    fi

    # If already configured and the --resume flag was specified, skip the rest
    if [[ -z "$ADMIN_USERNAME" || -z "$ADMIN_EMAIL" || -z "$ADMIN_PASSWORD" || -z "$ADMIN_DISPLAY_NAME" || "$USE_DEFAULTS" != "true" ]]; then

        log "The following user will be created and configured with ${Yellow}administrator privileges${COff} across all applications."
        log

        ADMIN_USERNAME=$(ask_value "Username" -d "$ADMIN_USERNAME" -v "$RE_VALID_USERNAME") || exit 1
        ADMIN_EMAIL=$(ask_value "Email address" -d "$ADMIN_EMAIL" -v "$RE_VALID_EMAIL") || exit 1
        while true; do
            local confirm_pass
            ADMIN_PASSWORD=$(ask_value "Password" -m) || exit 1
            confirm_pass=$(ask_value "Confirm password" -m) || exit 1
            if [ "$ADMIN_PASSWORD" != "$confirm_pass" ]; then
                log_warn "Passwords do not match. Please try again."
            else
                break
            fi
        done
        ADMIN_DISPLAY_NAME=$(ask_value "Display name (e.g. <First> <Last>)" -d "$ADMIN_DISPLAY_NAME")
        save_file=true
    fi

    if [ "$load_only" = "true" ]; then 
        save_env ADMIN_EMAIL "$ADMIN_EMAIL"
        return 0
    fi

    if [ "$save_file" = "true" ]; then
        local json
        if ! json=$( [ -s "$config_file" ] && cat "$config_file" || echo "{}" ); then
            log_error "Failed to read JSON for server administrator"
            exit 1
        fi
        if ! json=$(echo "$json" | jq \
            --arg id "$ADMIN_USERNAME" \
            --arg email "$ADMIN_EMAIL" \
            --arg password "$ADMIN_PASSWORD" \
            --arg displayName "$ADMIN_DISPLAY_NAME" '
            .id = $id |
            .email = $email |
            .password = $password |
            .displayName = $displayName
        '); then
            log_error "Failed to update JSON for server administrator"
            exit 1
        fi
        write_file "$json" "$config_file"
    fi

    save_env ADMIN_EMAIL "$ADMIN_EMAIL"
    write_file "$ADMIN_USERNAME" "${SECRETS_PATH}server_admin_username"
    write_file "$ADMIN_PASSWORD" "${SECRETS_PATH}server_admin_password"
}

check_reboot_needed() {
    if [ "$REQUIRES_RESTART" = true ]; then
        log_warn "The system must be rebooted to complete the requested operation."
        if [ "$UNATTENDED" = true ]; then
            log "\nThe system will reboot in 15 seconds..."
            sleep 15
            sudo shutdown -r now
            exit
        else
            log ""
            read -p "Do you want to reboot now? [Y/n] " user_input </dev/tty
            user_input=${user_input:-Y}
            if [[ "$user_input" =~ ^[Yy]$ ]]; then
                sudo shutdown -r now
                exit
            fi
        fi
    fi
}

# Terminate program
abort_install() {
    log
    log_warn "Setup aborted by user."
    # Restart any services that may have been stopped as part of the operation
    deploy_restart_backup
    backup_start_services
    exit 1
}

on_script_exit() {
    if [ "$JSON_OUT" = true ]; then
        JSON_OUTPUT=$(echo "${JSON_OUTPUT}" | jq \
            --arg 'version' "$PROJECT_VERSION" \
            --args '.version = $version | .logs=$ARGS.positional' \
            "${LOG_LINES[@]}"
        )
        echo "$JSON_OUTPUT"
    fi
}

run_deploy() {
    local exit_code
    find_installed_modules
    load_modules
    configure_docker
    prepare_env_file
    ask_for_variables
    if [ "$WEBUI_CONFIG" == true ]; then return 0; fi
    create_data_locations || return 1
    download_appdata
    configure_admin_account
    configure_tailscale || return 1
    configure_cloudflare_tunnel
    configure_smtp2go
    save_secrets
    find_missing_modules
    deploy_project; exit_code=$?
    deploy_restart_backup
    return $exit_code
}

backup_action_init() {
    log_header "Initializing backup repository"
    backup_check_requisites || exit 1
    restic_init_env || exit 1
    load_deployment_file || exit 1
    restic_init_repository || exit 1
}

backup_action_run() {
    local exit_code
    log_header "Creating a new recovery snapshot"
    backup_check_requisites || return 1
    load_deployment_file || return 1
    backup_stop_services || return 1
    log "Running restic backup operation. This operation could take several minutes..."
    restic_run_backup; exit_code=$?
    backup_start_services
    return $exit_code
}

backup_action_schedule() {
    log_header "Configuring scheduled backups"
    local has_changes=false
    if [ -n "$BACKUP_SCHEDULE_CHANGE" ]; then
        has_changes=true
        backup_configure_schedule || return 1
    fi
    if [ -n "$BACKUP_RETENTION_POLICY_CHANGE" ]; then
        has_changes=true
        backup_configure_retention || return 1
    fi
    if [ -n "$BACKUP_ENABLED_CHANGE" ]; then
        backup_configure_enabled || return 1
    fi
    if [ "$BACKUP_ENABLED" = false ] && compose_service_exists backup; then
        log "Removing service ${Purple}backup${COff} from deployment\n"
        docker compose -p "$COMPOSE_PROJECT_NAME" down backup || {
            log_error "Failed to remove backup service"
            return 1
        }
    elif [ "$BACKUP_ENABLED" = true ]; then
        if [ "$has_changes" = true ] || ! compose_service_exists backup --status running; then
            DEPLOY_SERVICES=backup
            NO_DOWNLOAD=true
            OVERRIDE_COMPOSE=false
            OVERRIDE_VERSIONS=false
            run_deploy || return 1
        fi
    fi
}

run_backup() {
    configure_docker
    find_installed_modules
    prepare_env_file
    backup_action_"${BACKUP_ACTION}" || return 1
}

snapshots_action_list() {
    log_header "Enumerating existing recovery snapshots"
    restic_list_snapshots || return 1
}

snapshots_action_browse() {
    log_header "Browsing snapshot contents"
    restic_browse_snapshot || return 1
}

snapshots_action_forget() {
    log_header "Removing an existing recovery snapshot"
    restic_forget_snapshots || return 1
    restic_list_snapshots || return 1
}

run_snapshots() {
    configure_docker
    prepare_env_file
    snapshots_action_"${SNAPSHOT_ACTION}" || return 1
}

restore_action_local() {
    log_header "Performing local restore operation"
    restore_configure_local || return 1
    load_deployment_file || return 1
    run_deploy || return 1
}

restore_action_snapshot() {
    log_header "Performing remote restore operation"
    restore_configure_remote || return 1
    restore_snapshot || return 1
    restore_configure_local || return 1
    run_deploy || return 1
}

run_restore() {
    if [ -z "$RESTORE_ACTION" ]; then
        log_error "You must specify either option: '--local' or '--snapshot'"
        return 1
    fi
    configure_docker
    find_installed_modules
    restore_check_installed || abort_install
    restore_action_"${RESTORE_ACTION}" || return 1
    execute_hooks "${POST_RESTORE_HOOKS[@]}" "post-restore" || return 1
}

run_modules() {
    if [ "$SHOW_ALL" = true ]; then
        load_module_help
        log "\nAvailable modules:\n"
        log_options MODULE_OPTIONS true
    else
        find_installed_modules
        log
    fi
}

webui_action_install() {
    log_header "Installing WebUI"
    webui_download || return 1
    webui_install_services || return 1
    local is_public=false
    if compose_service_exists traefik; then
        DEPLOY_SERVICES=traefik
        NO_DOWNLOAD=true
        OVERRIDE_COMPOSE=false
        OVERRIDE_VERSIONS=false
        run_deploy || return 1
        is_public=true
    fi
    webui_print_status $is_public
}

run_webui() {
    if [ "$WEBUI_ACTION" = "install" ]; then
        webui_action_install || return 1
    else
        log_error "Unknown webui action: $WEBUI_ACTION"
        return 1
    fi
}

################################################################################
#                           MAIN PROGRAM LOGIC

trap "abort_install" SIGINT

trap "on_script_exit" EXIT

parse_command_line "$@"

if [ "$UNATTENDED" = true ]; then 
    sudo -S -v || {
        log_error "Failed to authenticate with sudo as $USER"
        exit 1
    }
fi

run_"${SELECTED_ACTION}" || exit 1

log_done

check_reboot_needed