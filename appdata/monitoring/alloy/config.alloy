logging {
  level  = "info"
  format = "logfmt"
}

///////////////
// DOCKER LOGS
///////////////

// Discover Docker containers and extract metadata.
discovery.docker "local" {
  host = "unix:///var/run/docker.sock"
}

// Define a relabeling rule to create a service name from the container name.
discovery.relabel "docker" {
  targets = []
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex = "/(.*)"
    target_label = "container"
  }
}

// Configure a loki.source.docker component to collect logs from Docker containers.
loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.local.targets
  labels     = {"component" = "docker"}
  relabel_rules = discovery.relabel.docker.rules
  forward_to = [loki.process.normalize.receiver]
}

///////////////
// JOURNAL LOGS
///////////////

loki.relabel "journal" {
  forward_to = []
  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label = "service"
  }
}

loki.source.journal "local" {
  forward_to = [loki.process.normalize.receiver]
  relabel_rules = loki.relabel.journal.rules
}

/////////////////
// LOG PROCESSING
/////////////////

// Add event level label based on content
loki.process "normalize" {
  forward_to = [loki.write.local.receiver]
  stage.regex {
    expression = "(?i)\\b(?P<level>fatal|critical|error|warn|info|debug|trace)(?:ing)?\\b"
  }
  stage.template {
    source = "level"
    template = "{{ ToLower .Value }}"
  }
  stage.labels {
    values = { level = "" }
  }
  stage.static_labels {
    values = {
      monitor = sys.env("ALLOY_MONITOR"),
      platform = constants.os,
    }
  }
  stage.metrics {
    metric.counter {
      name = "log_lines_total"
      description = "total log lines processed"
      prefix = "self_host_"
      match_all = true
      action = "inc"
      max_idle_duration = "24h"
    }
  }
}

loki.write "local" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}